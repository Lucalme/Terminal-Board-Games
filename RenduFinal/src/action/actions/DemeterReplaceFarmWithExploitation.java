package action.actions;
import java.util.HashMap;
import java.util.Map;
import Game.Game;
import action.ActionBuild;
import board.resource.ResourceType;
import board.tile.Tile;
import building.Building;
import building.BuildingEffectType;
import building.Exploitation;
import building.Farm;
import player.Player;

public class DemeterReplaceFarmWithExploitation extends ActionBuild {
     public DemeterReplaceFarmWithExploitation(Player source, Tile tile){
        super(source, new Exploitation(source,BuildingEffectType.MultiplyResourceProduction, tile), tile);
    }

    public static HashMap<ResourceType, Integer> Cost() {
        return new HashMap<>(){{
            //TODO: Vérifier ces valeurs.
            put(ResourceType.Wood, 2);
            put(ResourceType.Wheat, 1);
            put(ResourceType.Sheep, 1);
        }};
    }

    public void Effect() {
        source.RemoveBuilding(tile.GetBuilding());
        super.Effect();
    }

    public static boolean isPossible(Player player, Game game){
        //TODO: vérifier s'il y a d'autres conditions. nécessite d'autres buildings?
        boolean atLeastOneFarm = false;
        for (Building b: player.GetOwnedBuildings()){
            if(b instanceof Farm){
                atLeastOneFarm = true;
                break;
            }
        }
        return PlayerCanAfford(player, Cost()) && atLeastOneFarm; 
    }
    public String Description() {
        return source.toString() + " remplacer une farme a une exploitation sur lile n°"+islandId;
    }
    public boolean CheckInstancePossible(Player player, Game game){
        return (tile.GetBuilding() != null) && (tile.GetBuilding() instanceof Farm);
    }   


    
}
